Proyecto y tecnologías que usaremos
En este curso realizaremos una aplicación muy parecida a Instagram, llamada petgram. Tendremos nuestras rutas, gestión de usuarios y likes.

Utilizaremos como empaquetador y transpilador:

Webpack
Babel
Estilado con CSS en JS con:

styled-components
Como linter utilizaremos:

Standard JS
Para fetching (obtención) de datos:

GraphQL
React Apollo
Para el enrutado de la SPA utilizaremos:

Reach Router
Para las buenas prácticas utilizaremos:

Lighthouse
Cypress
Por último haremos SEO, PWA y Deploy con:

React Helmet
Workbox
Progressive Web App
Deply con Now (ahora zeit)


---- Pasos para iniciar nuestro proyecto ----

Paso 1: Vamos a clonar el repositorio desde github.com/midudev/curso-platzi-react-avanzado usando git clone URL_DEL_REPO en nuestra consola.
Paso 2: Vamos a instalar webpack y webpack-cli como dependencias de desarrollo con: npm i webpack webpack-cli --save-dev
Paso 3: Crearemos una carpeta llama src y dentro de ella un archivo index.js en el cual colocaremos solo un console.log('Empezamos el curso!').
Paso 4: Crearemos en el root de nuestro proyecto un archivo webpack.config.js el cual tendrá toda la configuración de webpack
Paso 5: Instalaremos html-webpack-plugin con: npm i html-webpack-plugin --save-dev
Paso 6: Instalaremos webpack-dev-server con: npm i webpack-dev-server --save-dev
Paso 7: Añadiremos dos nuevos scripts llamados | "dev": "webpack-dev-server", "build": "webpack"
// webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin")

module.exports = {
        output: {
                filename: 'app.bundle.js'
        },
        plugins: [
                new HtmlWebpackPlugin()
        ]
}



---- Instalación de React y Babel ----
En esta clase vamos a configurar React instalando las dependencias npm i react react-dom y Babel para poder transpilar código jsx a JavaScript Vanilla con: npm i @babel/core @babel/preset-env babel-loader @babel/preset-react --save-dev
En el index.js importamos react-dom y react para renderizar JSX en el index.html (en el index.html colocamos un div que alli se va a realizar el render)
        import React from 'react' 
        import ReactDOM from 'react-dom'

        ReactDOM.render(<h1>hola</h1>, document.getElementById('app'))

Ahora añadiremos en nuestro webpack.config.js lo siguiente:
// webpack.config.js
{/*...*/}
module.exports = {
        {/*...*/}
        module: {
                rules: [
                        {
                                test: /\.js$/,
                                exclude: /node_modules/,
                                use: {
                                        loader: 'babel-loader',
                                        options: {
                                                presets: [
                                                        '@babel/preset-env',
                                                        '@babel/preset-react'
                                                ]
                                        }
                                }
                        }
                ]
        }
}



---- Zeit es ahora Vercel ----
En la próxima clase verás que el profesor realiza el deploy con Now, entonces cada vez que el profesor mencione “now.json” 
deberías reemplazarlo por “vercel.json”, de la misma manera, en la terminal se debería utilizar la palabra vercel.



---- Linter, extensiones y deploy con Now ----
En esta clase haremos que el desarrollo sea más ágil y correcto siguiendo los siguientes pasos:

  - Vamos a instalar StandardJS y eslint como dependencia de desarrollo con: npm i standard eslint --save-dev StandardJS nos va a servir de Linter para una mejor escritura de JavaScript/React.
  - Agregaremos un nuevo script en nuestro package.json: ""lint"": ""standard"".
  - Ahora vamos a ignorar aquellos archivos que no queremos que el Linter arregle, añadiremos en nuestro package.json lo siguiente:
        "standard": {
             "ignore": [
             "/api/**"
          ]
        }
  - Ahora, queremos que nuestro Linter nos detecte los errores a medida que vamos escribiendo, para hacer esto añadimos lo siguiente a nuestro package.json  (tambien podemos instalar la extension ESLint para que muestre los estilos):
        "eslintConfig": {
                "extends": [
                        "./node_modules/standard/eslintrc.json"
                ]
        }
  - Ahora debemos tener lo siguiente en nuestro editor de código para que funcione todo al pie de la letra: (npm i prettier eslint-config-prettier eslint-plugin-prettier -D)
        - Tener instalada la extensión ESLint
        - Si quieres que al guardar los cambios se formatee tu código deberás tener instalada la extensión Prettier
        - Tener las siguientes configuraciones en VSCode:
                - Format On Save: false
                - Prettier: Eslint Integration: true
                - Eslint: Auto Fix On Save: true
                // settings.json
                "editor.codeActionsOnSave": {
                        "source.fixAll.eslint": true
                }
                "eslint.format.enable": true,
                "prettier.eslintIntegration": true

Tambien otra manera es intalando npm i eslint -D y luego correr npx eslint --init | nos va a hacer un monton de preguntas nos instalara unas dependencias y nos genera el .eslintrc.js
Ya luego podemos abrir las settings y buscamos eslint y podemos configurar todo como el --fix al guardar | tenemos que tener instalada la extension eslint para ver los errores de linteo

- Ahora utilizaremos Now (ahora vercel) para hacer el deploy de nuestro proyecto.
- Descargaremos e instalaremos Now para que nos registre de una manera mucho más fácil los tokens de acceso y podamos continuar con el curso. (sudo npm i -g vercel)
- Entraremos a la carpeta de api y notaremos que ya tiene un archivo now.json que preparamos para ti con toda la configuración necesaria para hacer el deploy.
- Para desplegar el proyecto del backend haremos lo siguiente en nuestra terminar:
  - cd api
  - Cambiamos el name de la aplicación en el vercel.json
  - nos Logeamos con | vercel login
  - Finalmente ejecutamos vercel
- Ahora para desplegar nuestro front haremos lo siguiente:
  - Crearemos un archivo now.json en el root de nuestro proyecto con lo siguiente:
{
	"version": 2,
	"name": "petgram",
	"builds": [
		{
			"use": "@now/static-build",
			"src": "package.json"
		}
	],
	"routes": [
		{
			"src": "(.*).js",
			"dest": "/$1.js"
		},
		{
			"src": "(.*).json",
			"dest": "/$1.json"
		},
		{
			"src": "/.*",
			"dest": "index.html"
		}
	]
}
URL backend: https://petgram-server-willydavid.vercel.app
URL front: https://petgram-avanzado-react.vercel.app

- En nuestro package.json añadiremos el siguiente script: "now-build": "npm run build"
- Finalmente en la raíz de nuestro proyecto ejecutaremos now para que nos dé una URL en la que se verá nuestro proyecto."

conclusion: intalamos sudo npm i -g vercel , nos logueamos vercel login, y añadimos los vercel.json al api y al front para subir el back


---- CSS-in-JS ----
 - Antes todo era HTML-centric todo estaba en el html, estilos en css y js para funcionalidad
 - Despues pasamos a JS-centric que es lo que conocemos como JSX HTML dentro de JS y los estilos css aparte
 - CSS-in-JS como su nombre lo indica son estilos dentro del JS, los estilos son locales para cada componente y no hay colision de estilos usaremos Styled-components

npm i styled-components
Para soportar los CSS en JS instalar esta extension vscode-styled-components


---- Componente: Category ----
No usaremos export default exportaremos los componentes de manera nombrada export COMPONENTE

creamos un archivo llamado styles.js y dentro generamos los componentes estilados con styled-components
import styled from 'styled-components';

export const Anchor = styled.a`
    display: flex;
    flex-direction: column;
    text-align: center;
    text-decoration: none;
    width: 75px;
`
 
Ya luego los importamos y los renderizamos 
import { Anchor } from './styles'
export const Category = ({ cover = DEFAULT_IMAGE, path, emoji = '?' }) => (
    <Anchor href={ path }>
        <Image src={ cover } />
        { emoji }
    </Anchor>
)


---- Creando ListOfCategories y estilos globales ----
Para estilos globales con styled-components tenemos que importar createGlobalStyle y luego renderizar el componente en el App.js

import { createGlobalStyle } from 'styled-components'
export const GlobalStyle = createGlobalStyle`
 { estilos globales }
`
//App.js
import { GlobalStyle } from './GlobalStyles'
export const App = () => (
  <>
    <GlobalStyle />
    <ListOfCategories />
  </>
)
