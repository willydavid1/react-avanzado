Proyecto y tecnologías que usaremos
En este curso realizaremos una aplicación muy parecida a Instagram, llamada petgram. Tendremos nuestras rutas, gestión de usuarios y likes.

Utilizaremos como empaquetador y transpilador:

Webpack
Babel
Estilado con CSS en JS con:

styled-components
Como linter utilizaremos:

Standard JS
Para fetching (obtención) de datos:

GraphQL
React Apollo
Para el enrutado de la SPA utilizaremos:

Reach Router
Para las buenas prácticas utilizaremos:

Lighthouse
Cypress
Por último haremos SEO, PWA y Deploy con:

React Helmet
Workbox
Progressive Web App
Deply con Now (ahora zeit)


---- Pasos para iniciar nuestro proyecto ----

Paso 1: Vamos a clonar el repositorio desde github.com/midudev/curso-platzi-react-avanzado usando git clone URL_DEL_REPO en nuestra consola.
Paso 2: Vamos a instalar webpack y webpack-cli como dependencias de desarrollo con: npm i webpack webpack-cli --save-dev
Paso 3: Crearemos una carpeta llama src y dentro de ella un archivo index.js en el cual colocaremos solo un console.log('Empezamos el curso!').
Paso 4: Crearemos en el root de nuestro proyecto un archivo webpack.config.js el cual tendrá toda la configuración de webpack
Paso 5: Instalaremos html-webpack-plugin con: npm i html-webpack-plugin --save-dev
Paso 6: Instalaremos webpack-dev-server con: npm i webpack-dev-server --save-dev
Paso 7: Añadiremos dos nuevos scripts llamados | "dev": "webpack-dev-server", "build": "webpack"
// webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin")

module.exports = {
        output: {
                filename: 'app.bundle.js'
        },
        plugins: [
                new HtmlWebpackPlugin()
        ]
}



---- Instalación de React y Babel ----
En esta clase vamos a configurar React instalando las dependencias npm i react react-dom y Babel para poder transpilar código jsx a JavaScript Vanilla con: npm i @babel/core @babel/preset-env babel-loader @babel/preset-react --save-dev
En el index.js importamos react-dom y react para renderizar JSX en el index.html (en el index.html colocamos un div que alli se va a realizar el render)
        import React from 'react' 
        import ReactDOM from 'react-dom'

        ReactDOM.render(<h1>hola</h1>, document.getElementById('app'))

Ahora añadiremos en nuestro webpack.config.js lo siguiente:
// webpack.config.js
{/*...*/}
module.exports = {
        {/*...*/}
        module: {
                rules: [
                        {
                                test: /\.js$/,
                                exclude: /node_modules/,
                                use: {
                                        loader: 'babel-loader',
                                        options: {
                                                presets: [
                                                        '@babel/preset-env',
                                                        '@babel/preset-react'
                                                ]
                                        }
                                }
                        }
                ]
        }
}



---- Zeit es ahora Vercel ----
En la próxima clase verás que el profesor realiza el deploy con Now, entonces cada vez que el profesor mencione “now.json” 
deberías reemplazarlo por “vercel.json”, de la misma manera, en la terminal se debería utilizar la palabra vercel.



---- Linter, extensiones y deploy con Now ----
En esta clase haremos que el desarrollo sea más ágil y correcto siguiendo los siguientes pasos:

  - Vamos a instalar StandardJS y eslint como dependencia de desarrollo con: npm i standard eslint --save-dev StandardJS nos va a servir de Linter para una mejor escritura de JavaScript/React.
  - Agregaremos un nuevo script en nuestro package.json: ""lint"": ""standard"".
  - Ahora vamos a ignorar aquellos archivos que no queremos que el Linter arregle, añadiremos en nuestro package.json lo siguiente:
        "standard": {
             "ignore": [
             "/api/**"
          ]
        }
  - Ahora, queremos que nuestro Linter nos detecte los errores a medida que vamos escribiendo, para hacer esto añadimos lo siguiente a nuestro package.json  (tambien podemos instalar la extension ESLint para que muestre los estilos):
        "eslintConfig": {
                "extends": [
                        "./node_modules/standard/eslintrc.json"
                ]
        }
  - Ahora debemos tener lo siguiente en nuestro editor de código para que funcione todo al pie de la letra: (npm i prettier eslint-config-prettier eslint-plugin-prettier -D)
        - Tener instalada la extensión ESLint
        - Si quieres que al guardar los cambios se formatee tu código deberás tener instalada la extensión Prettier
        - Tener las siguientes configuraciones en VSCode:
                - Format On Save: false
                - Prettier: Eslint Integration: true
                - Eslint: Auto Fix On Save: true
                // settings.json
                "editor.codeActionsOnSave": {
                        "source.fixAll.eslint": true
                }
                "eslint.format.enable": true,
                "prettier.eslintIntegration": true

Tambien otra manera es intalando npm i eslint -D y luego correr npx eslint --init | nos va a hacer un monton de preguntas nos instalara unas dependencias y nos genera el .eslintrc.js
Ya luego podemos abrir las settings y buscamos eslint y podemos configurar todo como el --fix al guardar | tenemos que tener instalada la extension eslint para ver los errores de linteo

- Ahora utilizaremos Now (ahora vercel) para hacer el deploy de nuestro proyecto.
- Descargaremos e instalaremos Now para que nos registre de una manera mucho más fácil los tokens de acceso y podamos continuar con el curso. (sudo npm i -g vercel)
- Entraremos a la carpeta de api y notaremos que ya tiene un archivo now.json que preparamos para ti con toda la configuración necesaria para hacer el deploy.
- Para desplegar el proyecto del backend haremos lo siguiente en nuestra terminar:
  - cd api
  - Cambiamos el name de la aplicación en el vercel.json
  - nos Logeamos con | vercel login
  - Finalmente ejecutamos vercel
- Ahora para desplegar nuestro front haremos lo siguiente:
  - Crearemos un archivo now.json en el root de nuestro proyecto con lo siguiente:
{
	"version": 2,
	"name": "petgram",
	"builds": [
		{
			"use": "@now/static-build",
			"src": "package.json"
		}
	],
	"routes": [
		{
			"src": "(.*).js",
			"dest": "/$1.js"
		},
		{
			"src": "(.*).json",
			"dest": "/$1.json"
		},
		{
			"src": "/.*",
			"dest": "index.html"
		}
	]
}
URL backend: https://petgram-server-willydavid.vercel.app
URL front: https://petgram-avanzado-react.vercel.app

- En nuestro package.json añadiremos el siguiente script: "now-build": "npm run build"
- Finalmente en la raíz de nuestro proyecto ejecutaremos now para que nos dé una URL en la que se verá nuestro proyecto."

conclusion: intalamos sudo npm i -g vercel , nos logueamos vercel login, y añadimos los vercel.json al api y al front para subir el back


---- CSS-in-JS ----
 - Antes todo era HTML-centric todo estaba en el html, estilos en css y js para funcionalidad
 - Despues pasamos a JS-centric que es lo que conocemos como JSX HTML dentro de JS y los estilos css aparte
 - CSS-in-JS como su nombre lo indica son estilos dentro del JS, los estilos son locales para cada componente y no hay colision de estilos usaremos Styled-components

npm i styled-components
Para soportar los CSS en JS instalar esta extension vscode-styled-components


---- Componente: Category ----
No usaremos export default exportaremos los componentes de manera nombrada export COMPONENTE

creamos un archivo llamado styles.js y dentro generamos los componentes estilados con styled-components
import styled from 'styled-components';

export const Anchor = styled.a`
    display: flex;
    flex-direction: column;
    text-align: center;
    text-decoration: none;
    width: 75px;
`
 
Ya luego los importamos y los renderizamos 
import { Anchor } from './styles'
export const Category = ({ cover = DEFAULT_IMAGE, path, emoji = '?' }) => (
    <Anchor href={ path }>
        <Image src={ cover } />
        { emoji }
    </Anchor>
)


---- Creando ListOfCategories y estilos globales ----
Para estilos globales con styled-components tenemos que importar createGlobalStyle y luego renderizar el componente en el App.js

import { createGlobalStyle } from 'styled-components'
export const GlobalStyle = createGlobalStyle`
 { estilos globales }
`
//App.js
import { GlobalStyle } from './GlobalStyles'
export const App = () => (
  <>
    <GlobalStyle />
    <ListOfCategories />
  </>
)




---- SVGR: de SVG a componente de ReactJS ----
En esta clase usaremos maketext.io para crear nuestro logo y descargarlo en SVG. Posteriormente a esto utilizaremos SVGOMG para optimizar nuestro logo y tener una mejor versión para usarla en nuestro proyecto.
Luego para convertir nuestro logo svg en un componente utilizaremos SVGR.



---- Creando animaciones con keyframes ----
creamos una animacion con keyframes de styled-components y ya luego se llama a la funcion fadeIn 
import { keyframes, css } from 'styled-components'
const fadeInKeyframes = keyframes`
  from {
    filter: blur(5px);
    opacity: 0;
  }

  to {
    filter: blur(0);
    opacity: 1;
  }
`
export const fadeIn = ({ time = '1s', type = 'ease' } = {}) => (
  css`
    animation: ${time} ${fadeInKeyframes} ${type};
  `
)
// llamada dentro de una clase
  ${fadeIn({ time: '1s' })}


---- Intersection Observer ----
hacemos que cada componente de PhotoCard se renderize acorde entre al viewport


---- Uso de polyfill de Intersection Observer e imports dinámicos ----
En esta clase añadiremos soporte a navegadores viejos con un polyfill de Intersection Observer.

npm i intersection-observer
npm i @babel/plugin-syntax-dynamic-import -D // ya se soporta actualmente pero igual lo configuramos
npm i babel-eslint -D

En el webpack.config.js añadimos la siguiente linea
use: {
      loader: 'babel-loader',
      options: {
        plugins: ['@babel/plugin-syntax-dynamic-import'], // esta para imports dinamicos
        presets: ['@babel/preset-env', '@babel/preset-react']
      }
    }

Componente evaluamos si soporta el IntersectionObserver o utilizamos el polyfill :
useEffect(() => {
    Promise.resolve(
      typeof window.IntersectionObserver !== 'undefined'
        ? window.IntersectionObserver
        : import('intersection-observer') // import dinamico
    ).then(() => {
      const observer = new window.IntersectionObserver((entries) => {
        const { isIntersecting } = entries[0]

        if (isIntersecting) {
          setShow(true)
          observer.disconnect()
        }
      })
      observer.observe(ref.current)
    })
  }, [ref])

parser de eslint:
"eslintConfig": {
    "parser": "babel-eslint",
    "extends": [
      "./node_modules/standard/eslintrc.json"
    ]
  }




---- Usando el localStorage para guardar los likes ----
Guardamos y leemos el localStorage para la info de los likes



---- Custom Hooks: useNearScreen y useLocalStorage ----

Reutilizamos la logica de guardar y leer el LocalStorage en el (useLocalStorage) y el (useNearScreen) para el observer de las imagenes
Los Custom Hooks se encuentran disponibles en la carpeta hooks (al nivel de la raiz de src)

Asi se ve el (useLocalStorage - CUSTOM HOOK):
import { useState } from 'react'
export function useLocalStorage (key, initialValue) {
  const [storedValue, setValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key)
      return item !== null ? JSON.parse(item) : initialValue
    } catch (error) {
      return initialValue
    }
  })

  const setLocalStorage = (value) => {
    try {
      window.localStorage.setItem(key, JSON.stringify(value))
      setValue(value)
    } catch (e) {
      console.log(e)
    }
  }

  return [storedValue, setLocalStorage]
}



---- ¿Qué es GraphQL y React Apollo? Inicializando React Apollo Client y primer HoC ----
GraphQL es un lenguaje (lenguaje de consulta) creado por Facebook para obtener solo los datos que necesitamos en nuestra aplicación. Imaginemos que tenemos una REST API con WordPress, él nos entrega un JSON con mucha data innecesaria y solo queremos unos cuantos fields; GraphQL hace posible obtener únicamente esa data.
Ventajas: Describe la Data (que tipo de datos tenemos), optimiza recursos de red (solo traemos lo que necesitamos), resultados predecibles

React Apollo es un cliente que nos va a permitir conectarnos a un servidor GraphQL.

Vamos a instalar npm i apollo-boost, una utilidad que nos permite inicializar nuestra conexión con un servidor de Apollo muy rápidamente y sin configuración, necesitaremos npm i react-apollo el cual es la integración de Apollo con React y finalmente npm i graphql.

Configuraremos nuestro index.js (punto de entrada) para inicializar nuestro cliente de Apollo con GraphQL de la siguiente manera:
// index.js
{/*...*/}
import ApolloClient from 'apollo-boost'
import { ApolloProvider } from 'react-apollo'
{/*...*/}
const client = new ApolloClient({
        uri: 'https://petgram-server-willydavid.vercel.app/graphql'
})
ReactDOM.render(
        <ApolloProvider client={client}>
                <App />
        ApolloProvider>,
        document.getElementById('app')
)


// la primera query en ListOfPhotoCards
{/*...*/}
import { graphql } from 'react-apollo'
import { gql } from 'apollo-boost'

const withPhotos = graphql(gql`
  query getPhotos {
    photos {
      id,
      categoryId,
      src,
      likes,
      userId,
      liked
    }
  }
`)

const ListOfPhotoCardsComponent = ({ data: { photos = [] } } = {}) => {
  return (
    <ul>
      {photos.map((photo) => <PhotoCard key={photo.id} {...photo} />)}
    </ul>
  )
}

// HoC para el componente ListOfPhotoCardsComponent con la query de withPhotos
export const ListOfPhotoCards = withPhotos(ListOfPhotoCardsComponent)



---- Parametros para un query con GraphQL ----
Asi se ve la query con parametros:
export const withPhotos = graphql(gql`
  query getPhotos($categoryId: ID) {
    photos(categoryId: $categoryId) {
      id,
      categoryId,
      src,
      likes,
      userId,
      liked
    }
  }
`)
y se le pasan por props <ListOfPhotoCards categoryId={2} />

Concepto de container: (es el que se encarga de hacer el feching de dato de nuestros componentes)
 - Creamos dentro del src una carpeta llamada container y dentro un ListOfPhotoCards.js que importa el HoC y exporta el componente ListOfPhotoCards 
 - Ya luego en el App.js cambiamos el import | import { ListOfPhotoCards } from './container/ListOfPhotoCards'
 - Nos permite separar conceptos de componentes, fetching de datos (hoc) y los containers 



---- Usando las mutaciones con los likes ----

El componente de mutation es otro componente importante en una aplicación Apollo. 
Es un componente React que proporciona una función para ejecutar una mutation de GraphQL para así alterar la data.
Además, rastrea el estado de carga, finalización y error de esa mutación.



---- ¿Qué es Reach Router? Creando la ruta Home ----
Reach Router es una versión simplificada y mejor optimizada de React Router, su creador es Ryan Florence el mismo creador de React Router. Se anunció que los dos paquetes se iban a unir, pero su API se va a parecer más a Reach Router.

En este módulo te vamos a enseñar como usar este increíble paquete para manejar las rutas en nuestra aplicación.
npm i @reach/router

// App.js
import { Router } from '@reach/router'
<Router>
    <Home path='/' />
    <Home path='/pet/:id' />
</Router>

// package.json - scripts
    "dev": "webpack-dev-server --open --history-api-fallback",

// webpack-config.js
output: {
    filename: 'app.bundle.js',
    publicPath: '/'
},


---- Rutas protegidas ----
Con el método render props realizaremos rutas de autenticación para saber si el usuario ha iniciado sesión o no y podremos mostrar contenido dependiendo de las props que le estemos pasando.

Utilizamos las render props para determinar si un usuario esta autenticado

// App.js
{/*...*/}
const UserLogged = ({ children }) => {
  return children({ isAuth: false })
}
{/*...*/}
export const App = () => {
  return (
    <>
      <GlobalStyle />
      <Logo />
      <Router>
        <Home path='/' />
        <Home path='/pet/:categoryId' />
        <Detail path='/detail/:detailId' />
      </Router>

      {/* Rutas protegidas */}
      <UserLogged>
        {
          ({ isAuth }) => (
            isAuth
              ? (<Router>
                <Favs path='/favs' />
                <User path='/user' />
              </Router>)
              : (<Router>
                <NotRegisteredUser path='/favs' />
                <NotRegisteredUser path='/user' />
              </Router>)
          )
        }
      </UserLogged>
      <NavBar />
    </>
  )
}



---- Introducción a React.Context ----
Context API es una característica que tiene React para poder pasar datos en nuestra aplicación sin necesidad de usar las Props.

Para crear un contexto vamos a importar el método createContext de la librería React. El contexto que creemos no va a dejar de ser un componente de React, por ello debe llevar mayúscula al inicio.

El Context que creemos nos va a proporcionar 2 componentes:

Provider: componente que debe envolver a nuestra aplicación.
Consumer: nos va a permitir acceder a las render props que declaremos en el Provider. (recibe una render prop como children)


//Context.js
import React, { createContext, useState } from 'react'
const Context = createContext()

const Provider = ({ children }) => {
  const [isAuth, setIsAuth] = useState(false)
  const value = {
    isAuth,
    activateAuth: () => {
      setIsAuth(true)
    }
  }

  return (
    <Context.Provider value={value}>
      {children}
    </Context.Provider>
  )
}

export default {
  Provider,
  Consumer: Context.Consumer
}

//index.js punto de entrada de la App
{/*...*/}
import Context from './Context'
{/*...*/}
ReactDOM.render(
  <Context.Provider>
    <ApolloProvider client={client}>
      <App />
    </ApolloProvider>
  </Context.Provider>,
  document.getElementById('app')
)

// App.js
{/*...*/}
import Context from './Context'
{/*...*/}
<Context.Consumer>
    {
        ({ isAuth }) => (
        isAuth
            ? (<Router>
            <Favs path='/favs' />
            <User path='/user' />
            </Router>)
            : (<Router>
            <NotRegisteredUser path='/favs' />
            <NotRegisteredUser path='/user' />
            </Router>)
        )
    }
</Context.Consumer>

// Not NotRegisteredUser.js
import Context from '../Context'
export const NotRegisteredUser = () => (
  <Context.Consumer>
    {
      ({ activateAuth }) => {
        return (
          <form onSubmit={activateAuth}>
            <button> Iniciar sesión </button>
          </form>
        )
      }
    }
  </Context.Consumer>
)



---- Mutaciones para registro ----
De momento nuestro formulario no está guardando la información de registro en ningún lado, para ello vamos a usar un Mutation de GraphQL para mandarle la información a nuestro backend y que nos regrese un JSON Web Token.

Para configurar esta Mutation vamos a crear un container llamado RegisterMutation.js con el siguiente código:
// RegisterMutation.js
import React from ‘react’
import { Mutation } from ‘react-apollo’
import { gql } from ‘apollo-boost’

const REGISTER = gql`
	mutation signup ($input: UserCredentials!) {
		signup (input: $input)
	}
`

export const RegisterMutation = ({ children }) => {
	return (
		<Mutation mutation={REGISTER}>
			{children}
		Mutation>
	)
}


// NotRegisteredUser.js
import { RegisterMutation } from '../container/RegisterMutation'
export const NotRegisteredUser = () => (
  <Context.Consumer>
    {
      ({ activateAuth }) => {
        return (
          <>
            <RegisterMutation>
              {
                (register) => {
                  const onSubmit = ({ email, password }) => {
                    const input = { email, password }
                    const variables = { input }
                    register({ variables }).then(activateAuth)
                  }
                  return <UserForm title='Registrarse' onSubmit={onSubmit} />
                }
              }
            </RegisterMutation>
            <UserForm title='Iniciar sesión' onSubmit={activateAuth} />
          </>
        )
      }
    }
  </Context.Consumer>
)

El UserForm es el componente del formulario que tiene el evento onSubmit que se llama cuando se envia el formulario


---- Mutaciones para login ----
Creamos dentro de container el LoginMutation.js con la mutacion para hacer login y luego en el NotRegisteredUser.js utilizando las render props verificamos si se logueo el usuario

// LoginMutation.js
import React from 'react'
import { Mutation } from 'react-apollo'
import { gql } from 'apollo-boost'

const LOGIN = gql`
mutation login ($input: UserCredentials!) {
  login (input: $input)
}
`
export const LoginMutation = ({ children }) => {
  return (
    <Mutation mutation={LOGIN}>
      {children}
    </Mutation>
  )
}
